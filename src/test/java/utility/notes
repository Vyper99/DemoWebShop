Wait<WebDriver> wait = new FluentWait<>(driver)
                .withTimeout(Duration.ofSeconds(6))
                .pollingEvery(Duration.ofSeconds(2))
                .ignoring(ElementNotInteractableException.class);
        wait.until(new Function<WebDriver, Boolean>() {
            public Boolean apply(WebDriver d){
                return d.findElement(By.cssSelector("#opc-payment_method .button-1")).isDisplayed();
            }
        });



        Feature: Jewelry Purchase

          Scenario: Successfully purchase Jewelry

            When User Purchases Jewelry

            Then Checks-out Successfully



            package stepDefinitions;

            import io.cucumber.core.gherkin.Step;
            import io.cucumber.java.en.*;
            import io.github.bonigarcia.wdm.WebDriverManager;
            import org.openqa.selenium.By;
            import org.openqa.selenium.WebDriver;
            import org.openqa.selenium.WebElement;
            import org.openqa.selenium.chrome.ChromeDriver;
            import org.openqa.selenium.interactions.Actions;

            import static org.junit.Assert.assertEquals;
            import static utility.Hooks.driver;

            public class JewelryPurchase {

                @When("User Purchases Jewelry")
                public void user_purchases_jewelry() throws InterruptedException {
                    // Go to Demowebshop home page
                    WebDriverManager.chromedriver().setup();
                    driver = new ChromeDriver();
                    driver.get("http://demowebshop.tricentis.com/");

                    // Find Jewelry & Add To Cart
                    driver.findElement(By.cssSelector(".top-menu > li:nth-child(6) > a")).click();
                    Thread.sleep(2000);
                    driver.findElement(By.cssSelector(":nth-child(2) > div > div.details input")).click();
                    Thread.sleep(2000);

                    // Verify Item Is In Cart
                    WebElement cart=driver.findElement(By.cssSelector("#topcartlink > a > span.cart-label"));
                    Actions action = new Actions(driver);
                    action.moveToElement(cart).perform();
                    Thread.sleep(2000);
                    String expected = "Black & White Diamond Heart";
                    String actual = driver.findElement(By.cssSelector("#flyout-cart div.name > a")).getText();
            //        System.out.println("actual: " + actual);
                    assertEquals(expected, actual);

                    //Go To Cart
                    driver.findElement(By.cssSelector("#flyout-cart input")).click();
                }

            }




Runner2

package utility;

import io.cucumber.junit.CucumberOptions;
import io.cucumber.testng.AbstractTestNGCucumberTests;
import io.github.bonigarcia.wdm.WebDriverManager;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Parameters;

import java.time.Duration;


@CucumberOptions(
        features = {"src/test/java/features"},
        glue = {"stepDefinitions","utility"},
        tags = "@myTestTag",
        dryRun = false,
        plugin = {"pretty", "html:target/cucumber-reports.html"}
)
public class Runner2 extends AbstractTestNGCucumberTests {
    private static Threadlocal<WebDriver> LocalDriver = new Threadlocal<>();

    @BeforeMethod
    @Parameters({"browser"})
    public void setUp(String browser) {
        loadBrowser(browser);
    }

    private static void loadBrowser(String browser) {
        switch (browser.toLowerCase()) {
            case "firefox":
                WebDriverManager.firefoxdriver().setup();
                localDriver.set(new FirefoxDriver());
                break;
            case "chrome":
                WebDriverManager.edgedriver().setup();
                localDriver.set(new EdgeDriver());
                break;
        }
        localDriver.get().manage().timeouts().implicitlyWait(Duration.ofSeconds(3));
    }

    public static WebDriver getLocalDriver() { return localDriver.get(); }
    public static void setLocalDriver(WebDriver driver) {localDriver.set(driver);}

    @AfterMethod
    public void tearDown(){
        localDriver.get().quit();
        localDriver.remove();


    }
}



EBANQ CREDENTIALS
User Credentials: Demo-User
Password: Demo-Access1


TO-DO
camera purchase x
digital downloads purchase x